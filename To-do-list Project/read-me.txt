Projeto To-do-List

Qual o intuito deste projeto?
==
Aprender bastante sobre DOM, fixando o conteúdo na prática.

Oque é este projeto?
==
Um projeto no qual o usuário poderá interagir com 5 listas diferentes.
Este projeto terá as seguintes funcionalidades:
Escolher diferentes listas, de 1 a 5;
Renomear o nome das listas;
Adicionar lista. (Começará com 3, máximo de 5)
Remover lista. (Caso o usuário adicione o máximo[5], ele pode remover 2.)
Dentro das listas terão as funcionalidades:
Adicionar;
Marcar; (alterar cor)
Remover;
Editar;

Lógica :
==
1 Parte: (principal index)

Um index principal contendo 3 listas.
O usuário poderá adicionar mais 2 listas. Fechando um total de 5.
E poderá remover essas 2 listas. 
{
Cada lista receberá um AddEventListener('click'); que levará o usuário para a determinada lista selecionada. Ou seja, um index diferente.
Todas as listas conterão o mesmo estilo e funcionalidades. Mas cada uma pode ter diferentes alterações feita pelo usuário.

Botão de adicionar listas {
    Este botão terá uma classList que deixará visível uma lista com um clique, e duas listas com dois cliques.
}
Botão de remover listas {
    Este botão terá uma classList que deixará invisível uma lista com um clique, e duas listas com dois cliques.
}

} ! CONCLUIDO

2 Parte:
Cada respectiva lista chamara um diferente arquivo de HTML ou seja, outra página
Cada lista vai ter o mesmo conteúdo HTML e o mesmo ESTILO 
por este motivo, o usuário conseguirá fazer diferentes alterações em cada uma das listas 
Ex: uma lista de supermercado, e outra de afazeres

Cada lista conterá um botão de "Add", este botão abrirá um "painel" na qual o usuário irá interagir;
Podendo alterar e disfrutar das seguintes funcionalidades:

Inserir um nome ao item;
Inserir uma cor ao item; (Opcional)
Inserir uma hora para despertar e lembrar o usuário; (Opcional)
Inserir uma data para conclusão do item; (Opcional)
Inserir valor(preço); (Opcional)
Botão concluido;

Cada lista conterá um botão de "Remove", este botão removerá o ultimo item adicionado.

Cada lista conterá um botão de "Edit", este botão editará um item já adicionado. Abrirá o painel e novamente para o usuário e permitirá que ele altere oque ele já tinha colocado.

Lógica {
    Pai flex [ 
        pai-filho(
            buttonFecharPainel, input:text:name)]
}

mas vou criar um objeto(function) para armazenar o valor de cada input do pai-filho.
talvez eu tenha que usar localStorage no final
ou Cookies ?? um save no navegador que fica na propria maquina do usuario

terei que criar mais dois painel-filho. Um para o botão fechar, e um para o botão enviar.
Isto para eu conseguir posicionar cada um corretamente na tela.
Já que o painel filho principal (contendo os itens de input) receberá um display: flex.

Então a lógica deve ficar da seguinte maneira :
Lógica {
    Pai flex [
        pai-filhoFechar ( 
            buttonFecharPainel );

        pai-filho principal ( 
            inputs aqui, dados do item! );

        pai-filhoSubmit (
            buttonEnviarDados );
    ];
};

// calma lá, fudeu UHAXDUASDHUASDHUASD
o pai flex recebe apenas o flex box, ok?
o painel-filho, recebe as cores, e o tamanho do painel ... !
isto para ficar corretinho!!! centralizado e colorido... 



